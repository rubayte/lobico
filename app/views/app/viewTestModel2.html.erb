	<div class="container-fluid">
    	
    	<div class="panel panel-default">
			<div class="panel-heading">
    			<h4 class="panel-title">
    				Drug: <b><%= @drug %></b>
    			</h4>
  			</div>
  			<div class="panel-body">
   	 				<% @models.values[0].split("#").each do |model| -%>
				    	<div class="panel panel-default">
							<div class="panel-heading">
    							<h3 class="panel-title" id="outerMainPanelHeader">
    								Input Cell lines, Tissue types and Mutation of Input features
    							</h3>
  							</div>
  							<div class="panel-body">

								<div class="row">
									<div class="col-md-12">
										<div align="center">
			  								<div id="inputPlot" align="center">
  											</div>
  										</div>	
  									</div>
								</div>
							</div>
						</div>		

				    	<div class="panel panel-default">
							<div class="panel-heading">
    							<h3 class="panel-title" id="outerMainPanelHeader">
									Models
    							</h3>
  							</div>
  							<div class="panel-body">
  								<div class="alert alert-warning alert-dismissible" role="alert">
									<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
									<p align="center">Click on the model bars to view model diagram and statistics! (only the TP bars now!!)</p>
								</div>
								<div class="row">
									<div class="col-md-8">
										<div align="center">
			  								<div id="modelOverallPlot">
  												<div align="center">
	  												<b>Models</b>
	  											</div>
  											</div>
  										</div>	
  									</div>
									<div class="col-md-4">
								    	<div class="panel panel-default">
											<div class="panel-heading" id = "modelPanelHeaderDiv">
								    			<h4 class="panel-title">
								    				<div id="modelPanelHeader">
								    				</div>	
								    			</h4>
								  			</div>
								  			<div class="panel-body">
								  				<div align="center">
								  					<div class="row">
	  													<div id="modelCircuitPlot">
  														</div>						  						
								  					</div>
								  					<div class="row">
				  										<div id="modelPlot">
	  													</div>									  						
								  					</div>
								  					<div class="row">
				  										<div align="center">
				  											<p>
				  												Specificity = TN/(FP+TN)</br>
				  												Precision = TP/(TP + FP)</br>
																Recall = TP/(TP + FN)
				  											</p>
	  													</div>								  						
								  					</div>
  												</div>
								  			</div>	
								  		</div>		
  									</div>
								</div>
							</div>
						</div>		

				    	<div class="panel panel-default">
							<div class="panel-heading">
    							<h3 class="panel-title" id="outerMainPanelHeader">
									Detailed IC50s plots of Cell lines Predicted by Models 
    							</h3>
  							</div>
  							<div class="panel-body">
								<div class="row">
									<div class="col-md-12">
										<div align="center">
			  								<div id="modelOverallBoxPlot" align="center">
  											</div>
  										</div>	
  									</div>
								</div>
   	 						</div>
   	 					</div>
   	 						
   	 				<% end -%>
  			</div>
		</div>
    	
    </div>	
    
<!-- input plots -->
<script type="text/javascript">

	$(document).ready(function(){
  		var data= <%= @histData.html_safe %>;
  		var heatmapdata = <%= @heatmapData.html_safe %>;
  		var overalldata = <%= @overallData.html_safe %>;
		//var parentWidth = document.body.clientWidth;
		//var parentHeight = document.body.clientHeight;
		//width(); //document.width;
		//var percentsX = parseInt(document.getElementById("inputPlot").style.width);
		//var percentsY = parseInt(document.getElementById("inputPlot").style.height);
		//var pixelsW = parentWidth * (percentsX/100);
		//var pixelsH = parentHeight * (percentsY/100);
		//var pixelsW = document.getElementById('inputPlot').offsetWidth;
		//var pixelsH = document.getElementById('inputPlot').offsetHeight;
		//console.log(pixelsH);
		var pixelsW = $("#inputPlot").width();
		console.log(pixelsW);
		//var pixelsW = 1000;
		var pixelsH = 500;  		

  		var svg = dimple.newSvg("#inputPlot", pixelsW, pixelsH);
		
		// Set the bounds for the charts
		var row = 0,
		col = 0,
		top = 30,
		left = 50,
		inMarg = 10,
		width = (pixelsW/3) - 30,
		height = pixelsH - 175,
		heightBottomRow = 45,
		totalWidth = parseFloat(svg.attr("width"));
		
		// loop over 
		for (i = 0; i < 6; i++ )
		{
			var heightMain = 0;
			// Wrap to the row above
			if (left + ((col + 1) * (width + inMarg)) > totalWidth) {
				row += 1;
				col = 0;
			}		
			
			if (row > 0){
				heightMain = heightBottomRow;
			}else{
				heightMain = height;
			}
					
			var x = 0;
			var y = 0;
			if (i == 0)
			{
				// draw the histogram of sensitive and resistant cell lines		
				var myChart = new dimple.chart(svg, data);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);

				y = myChart.addCategoryAxis("y", "logIC50");
				y.addOrderRule("logIC50",true);
				y.ticks = null;
				x = myChart.addMeasureAxis("x", "Number_of_Cell_lines");
				myChart.addSeries("Classification", dimple.plot.bar);
				myChart.assignColor("RESISTANT", "#E6E6E6");
				myChart.assignColor("SENSITIVE", "#F78181");
				myChart.addLegend(left + (col * (width + inMarg))+10, (top - 10), (width/2), 20, "right");
				myChart.draw();
			}else if (i == 1){
				// draw the binary cell line tissue heatmap
				var myChart = new dimple.chart(svg, heatmapdata);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);

				y = myChart.addCategoryAxis("y", "Cellline");
				x = myChart.addCategoryAxis("x", "Tissue");
				//myChart.addSeries(null, dimple.plot.bar);
				var s = myChart.addSeries("Origin?", dimple.plot.bar);
				//s.addOrderRule("Tissue");
				myChart.assignColor("Origin", "#819FF7");
				myChart.stacked = false;
				myChart.addLegend(left + (col * (width + inMarg))+10, (top - 10), (width/2), 20, "right");
				myChart.draw();				
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
				
				// titles
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() - 20)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.text("Tissue Types");	
			}else if (i == 2){
				// draw the binary cell line mutation heatmap
				var myChart = new dimple.chart(svg, heatmapdata);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);
				y = myChart.addCategoryAxis("y", "Cellline");
				x = myChart.addCategoryAxis("x", "Input");
				//myChart.addSeries(null, dimple.plot.bar);
				myChart.addSeries("Mutated?", dimple.plot.bar);
				myChart.assignColor("", "#FFFFFF","#FFFFFF",0);
				myChart.assignColor("Mutated", "#B40431");				
				myChart.stacked = false;
				myChart.addLegend(left + (col * (width + inMarg))+10, (top - 10), (width/2), 20, "right");
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
				
				// titles
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() - 20)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.text("Mutations");					
			}else if (i == 4){
				// draw the overall tissue scenario
				var todata = dimple.filterData(overalldata, "Param", "Tissue");
				var myChart = new dimple.chart(svg, todata);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);
				x = myChart.addCategoryAxis("x", "InputType");
				y = myChart.addCategoryAxis("y", "Param");
				// testing color
				var ca = myChart.addColorAxis("OddsRatio", ["#00FF40", "#FFFFFF", "#FE2E2E"]);
				var s = myChart.addSeries(null, dimple.plot.bar);
				//s.addOrderRule("Tissue");
				function onHoverTissue(e) {
                	var ovrdata = <%= @overallData.html_safe %>;
					var todata = dimple.filterData(ovrdata,"InputType",e.xValue);
					var tissue_res_prect = 0,tissue_sen_prect = 0; 
					var res_total = 0,sen_total = 0;
					todata.forEach(function(item){
						console.log(item.OM);
						if (item.OM != "Others" && item.SR == "#Resistant CLs")
						{
							tissue_res_prect = parseInt(item.Count);
							res_total +=  parseInt(item.Count);
						}else if (item.OM == "Others" && item.SR == "#Resistant CLs")
						{
							res_total +=  parseInt(item.Count);
						}else if (item.OM != "Others" && item.SR == "#Sensitive CLs")
						{
							tissue_sen_prect = parseInt(item.Count);
							sen_total +=  parseInt(item.Count);
						}else if (item.OM == "Others" && item.SR == "#Sensitive CLs")
						{
							sen_total +=  parseInt(item.Count);
						}
					});
					//console.log(res_total);console.log(sen_total);
					var originResPercentage = Math.round((tissue_res_prect/res_total)*100) + "%";
					var originSenPercentage = Math.round((tissue_sen_prect/sen_total)*100) + "%";
					//console.log(originResPercentage);
					//console.log(originSenPercentage);
					var odrValue = todata[0].OddsRatio;
			        // Get the properties of the selected shape
			        var cx = parseFloat(e.selectedShape.attr("x")),
			            cy = parseFloat(e.selectedShape.attr("y")),
			            r = 10,
			            fill = "#F2F2F2",
			            stroke = "#A4A4A4"; //e.selectedShape.attr("stroke");
			            
			        // Set the size and position of the popup
			        var width = 250,
			            height = 150,
			            x = (cx + r + width + 10 < svg.attr("width") ?
			                  cx + r + 10 :
			                  cx - r - width - 20);
			            y = (cy - height / 2 < 0 ?
			                  15 :
			                  cy - height / 2);
			        
			        // Fade the popup fill mixing the shape fill with 80% white
			        var popupFillColor = d3.rgb(
			                    d3.rgb(fill).r ,
			                    d3.rgb(fill).g ,
			                    d3.rgb(fill).b
			                );
			        
			        // Create a group for the popup objects
			        popup = svg.append("g");
			        
			        popup
			        	.append("rect")
        			  	.attr("x", x)
          			  	.attr("y", y)
          				.attr("width", width + 50)
          				.attr("height", height + 30)
          				.attr("rx", 5)
          				.attr("ry", 5)
          				.style("fill", popupFillColor)
          				.style("stroke", stroke)
          				.style("stroke-width", 2);
			        
			        // Add the series value text
        			popup
				          .append("text")
				          .attr("x", x + 20)
				          .attr("y", y + 20)
				          .text("Tissue: " + e.xValue + ", log(OddsRatio): " + odrValue)
				          .style("font-family", "sans-serif")
				          .style("font-size", 12)
				          .style("font-weight", "bold");
				          //.style("fill", stroke);
			        
			        // Create a new mini chart 
			        tipChart = new dimple.chart(svg,  todata);
			        tipChart.setBounds(x + 60, y + 30, width - 30, height - 40);
			        var tx = tipChart.addCategoryAxis("x", "SR");
			        var ty = tipChart.addCategoryAxis("y", "OM");				
			        var popUpSeries = tipChart.addSeries("Count", dimple.plot.bar);
			        popUpSeries.barGap = 0;
					
					popUpSeries.afterDraw = function (shape, data) {
						//console.log(data);
						// Get the shape as a d3 selection
						var s = d3.select(shape),
						rect = {
							x: parseFloat(s.attr("x")),
							y: parseFloat(s.attr("y")),
							width: parseFloat(s.attr("width")),
							height: parseFloat(s.attr("height"))
						};
						// Only label bars where the text can fit
						if (rect.height >= 8) {
							// Add a text label for the value
							popup.append("text")
								// Position in the centre of the shape (vertical position is
								// manually set due to cross-browser problems with baseline)
								.attr("x", rect.x + rect.width / 2)
								.attr("y", rect.y + rect.height / 2 + 3.5)
								// Centre align
								.style("text-anchor", "middle")
								.style("font-size", "14px")
								.style("font-weight", "bold")
								.style("font-family", "sans-serif")
								// Make it a little transparent to tone down the black
								//.style("opacity", 0.6)
								// Format the number
								.text(data.aggField[0]);
							if (data.x == "#Resistant CLs" && data.y != "Others"){
								popup.append("text")
									.attr("x", rect.x + rect.width / 2)
									.attr("y", rect.y + rect.height / 2 + 20)
									.style("text-anchor", "middle")
									.style("font-size", "14px")
									.style("font-weight", "bold")
									.style("font-family", "sans-serif")
									.text("(" + originResPercentage + ")");
							}
							if (data.x == "#Sensitive CLs" && data.y != "Others"){
								popup.append("text")
									.attr("x", rect.x + rect.width / 2)
									.attr("y", rect.y + rect.height / 2 + 20)
									.style("text-anchor", "middle")
									.style("font-size", "14px")
									.style("font-weight", "bold")
									.style("font-family", "sans-serif")
									.text("(" + originSenPercentage + ")");
							}	
						}
					};
					
			        // Draw the mini chart
			        tipChart.draw();
					tx.titleShape.remove();
					ty.titleShape.remove();
        
				};
				
				// Event to handle mouse exit
    			function onLeave(e) {
    				// Remove the chart
        			if (tipChart !== null) {
          				tipChart._group.remove();
        			}
        			// Remove the popup
        			if (popup !== null) {
          				popup.remove();
        			}
    			};
				// hover events
				s.addEventHandler("mouseover", onHoverTissue);
      			s.addEventHandler("mouseleave", onLeave);
				myChart.draw();

				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else if (i == 5){
				// draw the overall mutation scenario
				var modata = dimple.filterData(overalldata, "Param", "Input");
				var myChart = new dimple.chart(svg, modata);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);
				x = myChart.addCategoryAxis("x", "InputType");
				y = myChart.addCategoryAxis("y", "Param");
				myChart.addColorAxis("OddsRatio", ["#00FF40", "#FFFFFF", "#FE2E2E"]);
				var s = myChart.addSeries(null, dimple.plot.bar);
				function onHoverInput(e) {
                	var ovrdata = <%= @overallData.html_safe %>;
					var modata = dimple.filterData(ovrdata,"InputType",e.xValue);
					
					var mutated_res_prect = 0,mutated_sen_prect = 0; 
					var res_total = 0,sen_total = 0;
					modata.forEach(function(item){
						console.log(item.OM);
						if (item.OM == "#Mutated" && item.SR == "#Resistant CLs")
						{
							mutated_res_prect = parseInt(item.Count);
							res_total +=  parseInt(item.Count);
						}else if (item.OM == "#Not Mutated" && item.SR == "#Resistant CLs")
						{
							res_total +=  parseInt(item.Count);
						}else if (item.OM == "#Mutated" && item.SR == "#Sensitive CLs")
						{
							mutated_sen_prect = parseInt(item.Count);
							sen_total +=  parseInt(item.Count);
						}else if (item.OM == "#Not Mutated" && item.SR == "#Sensitive CLs")
						{
							sen_total +=  parseInt(item.Count);
						}
					});
					var mutatedResPercentage = Math.round((mutated_res_prect/res_total)*100) + "%";
					var mutatedSenPercentage = Math.round((mutated_sen_prect/sen_total)*100) + "%";
					
					var odrValue = modata[0].OddsRatio;
			        // Get the properties of the selected shape
			        var cx = parseFloat(e.selectedShape.attr("x")),
			            cy = parseFloat(e.selectedShape.attr("y")),
			            r = 10,
			            fill = "#F2F2F2",
			            stroke = "#A4A4A4"; //e.selectedShape.attr("stroke");
			            
			        // Set the size and position of the popup
			        var width = 250,
			            height = 150,
			            x = (cx + r + width + 10 < svg.attr("width") ?
			                  cx + r + 10 :
			                  cx - r - width - 20);
			            y = (cy - height / 2 < 0 ?
			                  15 :
			                  cy - height / 2);
			        
			        // Fade the popup fill mixing the shape fill with 80% white
			        var popupFillColor = d3.rgb(
			                    d3.rgb(fill).r ,
			                    d3.rgb(fill).g ,
			                    d3.rgb(fill).b
			                );
			        
			        // Create a group for the popup objects
			        popup = svg.append("g");
			        
			        popup
			        	.append("rect")
        			  	.attr("x", x)
          			  	.attr("y", y)
          				.attr("width", width + 50)
          				.attr("height", height + 30)
          				.attr("rx", 5)
          				.attr("ry", 5)
          				.style("fill", popupFillColor)
          				.style("stroke", stroke)
          				.style("stroke-width", 2);
			        
			        // Add the series value text
        			popup
				          .append("text")
				          .attr("x", x + 20)
				          .attr("y", y + 20)
				          .text("Input:  " + e.xValue + ", log(OddsRatio): " + odrValue)
				          .style("font-family", "sans-serif")
				          .style("font-size", 12)
				          .style("font-weight", "bold");
			        
			        // Create a new mini chart of Unit Sales over Months
			        tipChart = new dimple.chart(svg,  modata);
			        tipChart.setBounds(x + 70, y + 30, width - 30, height - 40);
			        var tx = tipChart.addCategoryAxis("x", "SR");
			        var ty = tipChart.addCategoryAxis("y", "OM");				
			        var popUpSeries = tipChart.addSeries("Count", dimple.plot.bar);
			        popUpSeries.barGap = 0;
					
					popUpSeries.afterDraw = function (shape, data) {
						// Get the shape as a d3 selection
						var s = d3.select(shape),
						rect = {
							x: parseFloat(s.attr("x")),
							y: parseFloat(s.attr("y")),
							width: parseFloat(s.attr("width")),
							height: parseFloat(s.attr("height"))
						};
						// Only label bars where the text can fit
						if (rect.height >= 8) {
							// Add a text label for the value
							popup.append("text")
								// Position in the centre of the shape (vertical position is
								// manually set due to cross-browser problems with baseline)
								.attr("x", rect.x + rect.width / 2)
								.attr("y", rect.y + rect.height / 2 + 3.5)
								// Centre align
								.style("text-anchor", "middle")
								.style("font-size", "14px")
								.style("font-weight", "bold")
								.style("font-family", "sans-serif")
								// Make it a little transparent to tone down the black
								//.style("opacity", 0.6)
								// Format the number
								.text(data.aggField[0]);
							if (data.x == "#Resistant CLs" && data.y == "#Mutated"){
								popup.append("text")
									.attr("x", rect.x + rect.width / 2)
									.attr("y", rect.y + rect.height / 2 + 20)
									.style("text-anchor", "middle")
									.style("font-size", "14px")
									.style("font-weight", "bold")
									.style("font-family", "sans-serif")
									.text("(" + mutatedResPercentage + ")");
							}
							if (data.x == "#Sensitive CLs" && data.y == "#Mutated"){
								popup.append("text")
									.attr("x", rect.x + rect.width / 2)
									.attr("y", rect.y + rect.height / 2 + 20)
									.style("text-anchor", "middle")
									.style("font-size", "14px")
									.style("font-weight", "bold")
									.style("font-family", "sans-serif")
									.text("(" + mutatedSenPercentage + ")");
							}	
						}
					};
					
			        // Draw the mini chart
			        tipChart.draw();
					tx.titleShape.remove();
					ty.titleShape.remove();
        
				};
				// hover events
				s.addEventHandler("mouseover", onHoverInput);
      			s.addEventHandler("mouseleave", onLeave);
				myChart.draw();

				
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else{
				
			}
			
			if (i != 3){
				// Once drawn we can access the shapes
				// If this is not in the first column remove the y text
				if (col > 0) {
					y.shapes.selectAll("text").remove();
					//if (i != 4){
						// Remove the axis labels
						y.titleShape.remove();
					//}
				}
				// If this is not in the last row remove the x text
				if (row < 1) {
					x.shapes.selectAll("text").remove();
					if (i > 0){
						// Remove the axis labels
						x.titleShape.remove();	
					}
				}else{
					// Remove the axis labels
					x.titleShape.remove();	
				}
			}		

			// Move to the next column
			col += 1;
		}
		
	});
	
</script>


<!-- mnodel plot -->
<script type="text/javascript">

	$(document).ready(function(){
		plotModelStats("Model1");
	});
	
	function plotModelStats(model){
		d3.select("#modelPlot").select("svg").remove();		
  		var dataModel = <%= @modelData.html_safe %>;
		//var divid = i;
		var svgName = "#modelPlot";
		var modelParamToCheck = "MD";
		if (model.startsWith("Model")){
			//model id
			modelParamToCheck = "Model";
		}
		
		var modelName = model;
		var data = dimple.filterData(dataModel,modelParamToCheck,modelName);
		
		// set panel header with the model name
		if (data[0].Model == "Model1")
		{
			document.getElementById("modelPanelHeaderDiv").style.backgroundColor = "#BEF781";
			document.getElementById("modelPanelHeader").innerHTML= "Best Model: <strong>" + data[0].MD + "</strong>";
		}else{
			document.getElementById("modelPanelHeaderDiv").style.backgroundColor = document.getElementById("outerMainPanelHeader").style.backgroundColor;
			document.getElementById("modelPanelHeader").innerHTML= "Model: <strong>" + data[0].MD + "</strong>";
		}
		
		// call model circuit diagram plot fuinction
		plotModelCircuitDiagram(data[0].MD);				
						
		var width = $("#modelPlot").width();
 		var height = 150;
 		var svg = dimple.newSvg(svgName, width, height);
	  	
	  	// Set the bounds for the charts
		var row = 0,
		col = 0,
		top = 5,
		left = 5,
		inMarg = 10,
		width = width/4 - 10,
		height = height - 50,
		totalWidth = parseFloat(svg.attr("width"));
		
		// loop over 
		for (i = 0; i < 4; i++ )
		{
			// Wrap to the row above
			//if (left + ((col + 1) * (width + inMarg)) > totalWidth) {
			//	row += 1;
			//	col = 0;
			//}					
					
			var x = 0;
			var y = 0;
			var c = 0;
			if (i == 0)
			{
		 		// draw the ring chart with T* and F*
		 		var myChart = new dimple.chart(svg, data);
	 			myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);
				myChart.addMeasureAxis("p", "CountValues");
				//c = myChart.addColorAxis(["TP","TN","FP","FN"], ["#036A1C","#02BB30",,]);
				var ring = myChart.addSeries("Count", dimple.plot.pie);
	    		ring.innerRadius = "80%";
	    		myChart.assignColor("TP", "#036A1C");
	    		myChart.assignColor("TN","#02BB30");
	    		myChart.assignColor("FP","#FF0000");
	    		myChart.assignColor("FN","#FA5858");
	    		myChart.draw();
	    		console.log(data);
	    		var offset = -15;
	    		for (j = 0; j < 4; j++){
		    		var val = data[j].Count;
		    		val = val + " : "+ data[j].CountValues;
		    		// print central values
					svg.append("text")
	   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
	   					.attr("y", myChart._yPixels() + myChart._heightPixels() / 2 + offset)
						.style("text-anchor", "middle")
						.style("font-family", "sans-serif")
						.style("font-weight", "bold")
						.style("font-size", "12px")	
						.text(val);
					offset += 15;						    			
	    		}
			}else if(i == 1)
			{
				// draw the specificty ring chart
				//var tempData = dimple.filterData(dataModel,modelParamToCheck,modelName);
				tempData = dimple.filterData(data,"Stats","Specificity");
				var val = Math.round(((tempData[0].StatsValues * 100)*100)/100) + "%";
				var myChart = new dimple.chart(svg, tempData);
	 							myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);
				myChart.addMeasureAxis("p", "Stats");
				var ring = myChart.addSeries("StatsValues", dimple.plot.pie);
	    		ring.innerRadius = "75%";
	    		myChart.draw();
	    		// central values and titles
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() + myChart._heightPixels() / 2 + 5)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.style("font-size", "18px")	
					.text(val);				
					
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() + myChart._heightPixels()  + 10)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.style("font-size", "12px")	
					.text("Specificity");
					
			}else if(i == 2)
			{
				// draw the specificty ring chart
				//var tempData = dimple.filterData(dataModel,modelParamToCheck,modelName);
				tempData = dimple.filterData(data,"Stats","Precision");
				var val = Math.round(((tempData[0].StatsValues * 100)*100)/100) + "%";
	 			var myChart = new dimple.chart(svg, tempData);
	 							myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);
				myChart.addMeasureAxis("p", "Stats");
				var ring = myChart.addSeries("StatsValues", dimple.plot.pie);
	    		ring.innerRadius = "75%";
	    		myChart.draw();
	    		// central values and titles
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() + myChart._heightPixels() / 2 + 5)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.style("font-size", "18px")	
					.text(val);				
					
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() + myChart._heightPixels()  + 10)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.style("font-size", "12px")	
					.text("Precision");				
			}else if(i == 3)
			{
				// draw the specificty ring chart
				//var tempData = dimple.filterData(dataModel,modelParamToCheck,modelName);
				tempData = dimple.filterData(data,"Stats","Recall");
				var val = Math.round(((tempData[0].StatsValues * 100)*100)/100) + "%";
	 			var myChart = new dimple.chart(svg, tempData);
	 							myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);
				myChart.addMeasureAxis("p", "Stats");
				var ring = myChart.addSeries("StatsValues", dimple.plot.pie);
	    		ring.innerRadius = "75%";
	    		myChart.draw();
	    		// central values and titles
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() + myChart._heightPixels() / 2 + 5)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.style("font-size", "18px")	
					.text(val);				
					
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() + myChart._heightPixels()  + 10)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.style("font-size", "12px")	
					.text("Recall");					
			}else{
				
			}

			// move to the next column
			col += 1;
		}	
	  		
			
			// draw the bar plot of second set of params
			//tempData2 = dimple.filterData(tempData,"Stats",["Specificity","Precision","Recall"])
			//var myChart2 = new dimple.chart(svg, tempData2);
			//myChart2.setBounds(300, 50, 300, 100);
			//var y = myChart2.addCategoryAxis("y", "Stats");
			//var x = myChart2.addMeasureAxis("x", "StatsValues");
			//x.tickFormat = "%";
			//var s = myChart2.addSeries(null, dimple.plot.bar);
			//myChart2.draw();
			//x.titleShape.remove();
			//y.titleShape.remove();			
  		
	}//);
	
</script>

<!-- model overall plots -->
<script type="text/javascript">

	 $(document).ready(function(){	
  		var dataModel = <%= @modelData.html_safe %>;
  		var bdata = <%= @boxData.html_safe %>;
		var countMax = 540;
		var pixelsW = $("#modelOverallPlot").width();
		//pixelsW = (pixelsW/2) + 100;
		var pixelsH = 600;  		

  		var svg = dimple.newSvg("#modelOverallPlot", pixelsW, pixelsH);

		
		// Set the bounds for the charts
		var row = 0,
		col = 0,
		top = 30,
		left = 50,
		inMarg = 20,
		width = (pixelsW/4) - 30,
		height = (pixelsH/2) - 145,
		//heightBottomRow = 45,
		totalWidth = parseFloat(svg.attr("width"));
		
		// loop over 
		for (i = 0; i < 7; i++ )
		{
			//var svg = svg1;
			// Wrap to the row above
			//if (left + ((col + 1) * (width + inMarg)) > totalWidth) {
			//	row += 1;
			//	col = 0;
			//}					
					
			var x = 0;
			var y = 0;
			var c = 0;
			if (i == 0)
			{
				// draw the TP plot
				var data = dimple.filterData(dataModel,"Count","TP");
				var myChart = new dimple.chart(svg, data);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);

				y = myChart.addMeasureAxis("y", "CountValues");
				y.ticks = null;
				y.overrideMax = countMax;
				x = myChart.addCategoryAxis("x", "MD");
				x.addOrderRule("MD");
				c = myChart.addColorAxis("TP", "#036A1C");
				var mySeries = myChart.addSeries("Count", dimple.plot.bar);
				//myChart.addLegend(left + (col * (width + inMarg))+10, (top - 10), (width/2), 20, "right");
				mySeries.addEventHandler("click", function (e) {
					console.log(e.xValue);
					plotModelStats(e.xValue);
					// Log the Sales Volume of the clicked bubble
				});
				svg
	            .append("text")
	                .attr("x", left + (col * (width + inMarg)) + (width / 2))
	                .attr("y", top + (row * (height + inMarg)) + (height / 2) + 12)
	                .style("font-family", "sans-serif")
	                .style("text-anchor", "middle")
	                .style("font-size", "28px")
	                .style("opacity", 0.5)
	                .text("TP");
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else if(i == 1)
			{
				// draw the TP plot
				var data = dimple.filterData(dataModel,"Count","TN");
				var myChart = new dimple.chart(svg, data);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);

				y = myChart.addMeasureAxis("y", "CountValues");
				y.ticks = null;
				y.overrideMax = countMax;
				x = myChart.addCategoryAxis("x", "MD");
				x.addOrderRule("MD");
				c = myChart.addColorAxis("TN", "#02BB30");
				myChart.addSeries(null, dimple.plot.bar);
				svg
	            .append("text")
	                .attr("x", left + (col * (width + inMarg)) + (width / 2))
	                .attr("y", top + (row * (height + inMarg)) + (height / 2) + 12)
	                .style("font-family", "sans-serif")
	                .style("text-anchor", "middle")
	                .style("font-size", "28px")
	                .style("opacity", 0.5)
	                .text("TN");
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else if(i == 2){
				// draw the TP plot
				var data = dimple.filterData(dataModel,"Count","FP");
				var myChart = new dimple.chart(svg, data);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);

				y = myChart.addMeasureAxis("y", "CountValues");
				y.ticks = null;
				y.overrideMax = countMax;
				x = myChart.addCategoryAxis("x", "MD");
				x.addOrderRule("MD");
				c = myChart.addColorAxis("FP", "#FF0000");
				myChart.addSeries(null, dimple.plot.bar);
				svg
	            .append("text")
	                .attr("x", left + (col * (width + inMarg)) + (width / 2))
	                .attr("y", top + (row * (height + inMarg)) + (height / 2) + 12)
	                .style("font-family", "sans-serif")
	                .style("text-anchor", "middle")
	                .style("font-size", "28px")
	                .style("opacity", 0.5)
	                .text("FP");
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else if(i == 3){
				// draw the TP plot
				var data = dimple.filterData(dataModel,"Count","FN");
				var myChart = new dimple.chart(svg, data);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);

				y = myChart.addMeasureAxis("y", "CountValues");
				y.ticks = null;
				y.overrideMax = countMax;
				x = myChart.addCategoryAxis("x", "MD");
				x.addOrderRule("MD");
				c = myChart.addColorAxis("FN", "#FA5858");
				myChart.addSeries(null, dimple.plot.bar);
				svg
	            .append("text")
	                .attr("x", left + (col * (width + inMarg)) + (width / 2))
	                .attr("y", top + (row * (height + inMarg)) + (height / 2) + 12)
	                .style("font-family", "sans-serif")
	                .style("text-anchor", "middle")
	                .style("font-size", "28px")
	                .style("opacity", 0.5)
	                .text("FN");
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else if(i == 4){
				// draw the Specificity plot
				var data = dimple.filterData(dataModel,"Stats","Specificity");
				var myChart = new dimple.chart(svg, data);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);

				y = myChart.addMeasureAxis("y", "StatsValues");
				y.ticks = null;
				y.overrideMax = 1;
				y.tickFormat = "%";
				x = myChart.addCategoryAxis("x", "MD");
				x.addOrderRule("MD");
				//c = myChart.addColorAxis("Specificity", "#4685CE");
				myChart.addSeries(null, dimple.plot.bar);
				svg
	            .append("text")
	                .attr("x", left + (col * (width + inMarg)) + (width / 2))
	                .attr("y", top + (row * (height + inMarg)) + (height / 2) + 12)
	                .style("font-family", "sans-serif")
	                .style("text-anchor", "middle")
	                .style("font-size", "28px")
	                .style("opacity", 0.5)
	                .text("Specificity");
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else if(i == 5){
				// draw the Precision plot
				var data = dimple.filterData(dataModel,"Stats","Precision");
				var myChart = new dimple.chart(svg, data);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);

				y = myChart.addMeasureAxis("y", "StatsValues");
				y.ticks = null;
				y.overrideMax = 1;
				y.tickFormat = "%";
				x = myChart.addCategoryAxis("x", "MD");
				x.addOrderRule("MD");
				//c = myChart.addColorAxis("Precision", "#67A3E8");
				myChart.addSeries(null, dimple.plot.bar);
				svg
	            .append("text")
	                .attr("x", left + (col * (width + inMarg)) + (width / 2))
	                .attr("y", top + (row * (height + inMarg)) + (height / 2) + 12)
	                .style("font-family", "sans-serif")
	                .style("text-anchor", "middle")
	                .style("font-size", "28px")
	                .style("opacity", 0.5)
	                .text("Precision");
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else if(i == 6){
				// draw the Recall plot
				var data = dimple.filterData(dataModel,"Stats","Recall");
				var myChart = new dimple.chart(svg, data);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);

				y = myChart.addMeasureAxis("y", "StatsValues");
				y.ticks = null;
				y.overrideMax = 1;
				y.tickFormat = "%";
				x = myChart.addCategoryAxis("x", "MD");
				x.addOrderRule("MD");
				//c = myChart.addColorAxis("Recall", "#89B7EB");
				myChart.addSeries(null, dimple.plot.bar);
				svg
	            .append("text")
	                .attr("x", left + (col * (width + inMarg)) + (width / 2))
	                .attr("y", top + (row * (height + inMarg)) + (height / 2) + 12)
	                .style("font-family", "sans-serif")
	                .style("text-anchor", "middle")
	                .style("font-size", "28px")
	                .style("opacity", 0.5)
	                .text("Recall");
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}
			else{
			}
			
			// Once drawn we can access the shapes
			// If this is not in the first column remove the y text
			if (col > 0 && i != 4) {
				y.shapes.selectAll("text").remove();
			}
			// If this is not in the last row remove the x text
			if (row < 1) {
				x.shapes.selectAll("text").remove();
			//	if (i > 0){
					// Remove the axis labels
			//		x.titleShape.remove();	
			}
			//}else{
				// Remove the axis labels
			//	x.titleShape.remove();	
			//}
				
			// Remove the axis labels
			x.titleShape.remove();
			y.titleShape.remove();
			if (i == 3){
				row += 1;
				col = 0;
			}else{
				// Move to the next column
				col += 1;
			}
		}	  		
	});
	
</script>

<!-- IC50 boxplots -->
<script type="text/javascript">

	var bdata = <%= @boxData.html_safe %>;
	var mndata = <%= @mnData.html_safe %>;
	//console.log(bdata);
	
	var pixelsW = $("#modelOverallBoxPlot").width();
	var pixelsH = 550;

	var margin = {top: 5, right: 70, bottom: 195, left: 30};
	var width = pixelsW - margin.left - margin.right;
	var height = pixelsH - margin.bottom - margin.top;   		
	
	var labels = true; // show the text labels beside individual boxplots?
	var min = -2,//Infinity,
		max = 8;//-Infinity;
			    	
	var btempdata = bdata; //dimple.filterData(bdata,"Model","Model1");
	var keys = Object.keys(bdata);

	var data = [];
	for (i = 0; i < 16; i++)
	{
		data[i] = [];
		mndata.forEach(function(m){
			var mnkeys = Object.keys(m);
			data[i][0] = m[mnkeys[i]]; //"modelPred_" + i;
		});
		//data[i][0] = "modelPred_" + i;
		data[i][1] = [];
		btempdata.forEach(function(x) {
			var keys = Object.keys(x);
			//for(var key in keys){
			if (x[keys[i]] != "NA")
			{
				data[i][1].push(x[keys[i]]);	
			}
			//}
		});
	}
	//console.log(data[2][1]);
	//console.log(data[4][1]);
	//console.log(data[5][1]);
	
	//data[1] = [];		
	// add here the header of the csv file
	//data[0][0] = "PS";
	//data[1][0] = "PR";
				
	//data[0][1] = [];
	//data[1][1] = [];		
  		
	//btempdata.forEach(function(x) {
		//console.log(x);
		
	//		var v1 = Math.floor(x.Q1),
	//		v2 = Math.floor(x.Q2);
			//console.log(v1);
			//console.log(v2);
	//		if (x.Q1 != "NA" ){
	//			data[0][1].push(v1);								
	//		}
	//		if (x.Q2 != "NA" ){
	//			data[1][1].push(v2);								
	//		}

			//var rowMax = Math.max(v1, v2);
			//var rowMin = Math.min(v1, v2);
			//if (rowMax > max) max = rowMax;
			//if (rowMin < min) min = rowMin;		
					 
	//});
	
	//console.log(data[0][1]);
	//console.log("asd");
	//console.log(data[1][1]);
		
	var chart = d3.box()
		.whiskers(iqr(1.5))
		.width(width)
		.height(height)	
		.domain([min, max])
		.showLabels(labels);

	var svg = d3.select("#modelOverallBoxPlot").append("svg")
		.attr("width", width + margin.left + margin.right)
		.attr("height", height + margin.bottom + margin.top)
		.attr("class", "box")    
		.append("g")
		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");
						
	// the x-axis
	var x = d3.scale.ordinal()	   
		.domain( data.map(function(d) { return d[0] } ) )	    
		.rangeRoundBands([0, width], 0.8, 0.2); 		

	var xAxis = d3.svg.axis()
		.scale(x)
		.orient("bottom");
						
	// the y-axis
	var y = d3.scale.linear()
		.domain([min, max])
		.range([height + margin.top, 0 + margin.top]);
				
	var yAxis = d3.svg.axis()
		.scale(y)
		.orient("left");
					
	// draw the boxplots	
	svg.selectAll(".box")	   
	  	.data(data)
		.enter().append("g")
			.attr("transform", function(d) { return "translate(" +  x(d[0])  + "," + margin.top + ")"; } )
		.call(chart.width(x.rangeBand())); 
      		
	// draw y axis only for the first boxplot
	svg.append("g")
		.attr("class", "y axis")
		.call(yAxis)
		.append("text") // and text1
		.attr("transform", "rotate(-90)")
		.attr("y", -50)
		.attr("x", -( height / 2))
		.attr("dy", ".71em")
		.style("text-anchor", "end")
		.style("font-size", "10px") 
		.text("logIC50s");			      		
	
		
	
	// draw x axis	
	svg.append("g")
		.attr("class", "x axis")
		.attr("transform", "translate(0," + (height  + margin.top) + ")")
		.call(xAxis)
		.selectAll("text")
			.style("font-size", "10px")
			.attr("y", 0)
    		.attr("x", 0)
			.attr("transform", "translate(0,10) rotate(45)")
			.style("text-anchor", "start")
		.append("text")             // text label for the x axis
			.attr("x", (width / 2) )
			.attr("y",  10 )
			.attr("dy", ".71em")
			.style("text-anchor", "middle")
			.style("font-size", "10px")
			.text("Predictions");
	

						
	// Returns a function to compute the interquartile range.
	function iqr(k) {
		  return function(d, i) {
		    var q1 = d.quartiles[0],
		        q3 = d.quartiles[2],
		        iqr = (q3 - q1) * k,
		        i = -1,
		        j = d.length;
		    while (d[++i] < q1 - iqr);
		    while (d[--j] > q3 + iqr);
		    return [i, j];
		 };
	}
	
</script>


<!-- model circuit plot -->
<script type="text/javascript">
	function plotModelCircuitDiagram (modelDescription){

		d3.select("#modelCircuitPlot").select("svg").remove();
		var pixelsW = $("#modelCircuitPlot").width();
		console.log("from circuit diagram:" + pixelsW);		
		var graph = new joint.dia.Graph();

		var paper = new joint.dia.Paper({
			el: $('#modelCircuitPlot'),
			model: graph,
			width: pixelsW, height: 300, gridSize: 5,
			snapLinks: true,
			linkPinning: false,
			interactive: false,
			//guard:true,
			defaultLink: new joint.shapes.logic.Wire,
			validateConnection: function(vs, ms, vt, mt, e, vl) {
		        if (e === 'target') {
		
		            // target requires an input port to connect
		            if (!mt || !mt.getAttribute('class') || mt.getAttribute('class').indexOf('input') < 0) return false;
		
		            // check whether the port is being already used
		            var portUsed = _.find(this.model.getLinks(), function(link) {
		
		                return (link.id !== vl.model.id &&
		                        link.get('target').id === vt.model.id &&
		                        link.get('target').port === mt.getAttribute('port')); 
		            });
		
		            return !portUsed;
		
		        } else { // e === 'source'
		
		            // source requires an output port to connect
		            return ms && ms.getAttribute('class') && ms.getAttribute('class').indexOf('output') >= 0; 
		        }
		   }
		});

		// zoom the viewport
		var zoom = 1.5;
		if (pixelsW < 500)
		{
			zoom = 1;
		}
		paper.scale(zoom,zoom);

			
		var model = modelDescription;
		console.log(model);
		var tokens = [];
		var simplePattern = false;

		// diagramm setup
		var gates = {};
		var wires = [];
		var xPos = 80;
		var yPos = 5;

		// check for & and | to deduce pattern
		if (model.indexOf("&") > -1  && model.indexOf("|") > -1){
			// A & B | C & D
			var tokensOR = model.split("|");
			var tokensAnd = tokensOR[0].split('&');
			tokensAnd = tokensAnd.concat(tokensOR[1].split('&'));
			console.log(tokensAnd);
			// set up the gates
			for (i = 0; i < tokensAnd.length - 1; i++)
			{
				var gateid = 'gate' + i ;
				if (i == 2){
					gates[gateid] = new joint.shapes.logic.Or({ position: { x: xPos + 150, y: yPos/3 }});
				}else{
					gates[gateid] = new joint.shapes.logic.And({ position: { x: xPos, y: yPos }});
					//xPos += 90;
					yPos += 50;
				}
			}
			// set up the wires
			for (i = 0; i < Object.keys(gates).length - 1; i++)
			{
				var wx = 0, wy = 0;
				if (i == 0){
					wx = 140;
					wy = 40;
				}else{
					wx = 135;
					wy = 65;
				}
				var inport = '';
				if(i == 0){
					inport = 'in1';
				}else{
					inport = 'in2';
				}
				var gatefrom = 'gate' + i;
				//console.log(gatefrom);
				var j = 2;
				var gateto = 'gate' + j ;
				//console.log(gateto);
				var wtemp = {};
				wtemp.source = {};
				wtemp.target = {};
				wtemp.vertices = [];
				wtemp.source.id = gates[gatefrom].id;
				wtemp.source.port = 'out';
				wtemp.target.id = gates[gateto].id;
				wtemp.target.port = inport;
				var v = {};
				v.x = wx;
				v.y = wy;
				console.log(v);
				//wtemp.vertices[0] = v;
				//wtemp.vertices.y = 100;
				//vertices: [{ x: 215, y: 100 }]
				wires.push(wtemp);
			}
				
			// set the labels 
			var svg = document.getElementById("modelCircuitPlot").getElementsByTagName("svg")[0];
			var t = 0;
			for (i = 0; i < Object.keys(gates).length -1; i++)
			{
				var gateid = 'gate' + i ;
				var yPosOffset = 15;
				for (j = 0; j < 2; j++)
				{
					var textelement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
					textelement.setAttribute("x", (gates[gateid].attributes.position.x - 50)*zoom);
					textelement.setAttribute("y", (gates[gateid].attributes.position.y + yPosOffset)*zoom);
					textelement.setAttribute("font-family","Verdana"); 
					textelement.setAttribute("font-size","8");
					textelement.setAttribute("font-weight","bold");
					textelement.textContent = tokensAnd[t];
					svg.appendChild(textelement);
					t += 1;
					yPosOffset += 15;
				}	
			}
				
		}else if (model.indexOf("&") > -1  && model.indexOf("|") == -1){
			// A & B or A & B & C
			simplePattern = true;
			tokens = model.split("&");
			for (i = 0; i < tokens.length - 1; i++)
			{
				var gateid = 'gate' + i ;
				gates[gateid] = new joint.shapes.logic.And({ position: { x: xPos, y: yPos }});
				xPos += 90;
				yPos += 50;
			}
		}else if (model.indexOf("&") == -1  && model.indexOf("|") > -1){
			// A | B or A | B | C
			simplePattern = true;
			tokens = model.split("|");
			for (i = 0; i < tokens.length - 1; i++)
			{
				var gateid = 'gate' + i ;
				gates[gateid] = new joint.shapes.logic.Or({ position: { x: xPos, y: yPos }});
				xPos += 90;
				yPos += 50; 
			}
		}else{
			var svg = document.getElementById("modelCircuitPlot").getElementsByTagName("svg")[0];
			
			var textelement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
			textelement.setAttribute("x", 50);
			textelement.setAttribute("y", 50);
			textelement.setAttribute("font-family","Verdana"); 
			textelement.setAttribute("font-size","8");
			textelement.setAttribute("font-weight","bold");
			textelement.textContent = model;
			svg.appendChild(textelement);
				
			// draw the circle
			var singleElement = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
			singleElement.setAttribute("cx",80);
			singleElement.setAttribute("cy",50);
			singleElement.setAttribute("r",5);
			singleElement.setAttribute("fill","white");
			singleElement.setAttribute("stroke","black");
			singleElement.setAttribute("stroke-width",1);
			svg.appendChild(singleElement);
			// draw the line
			singleElement = document.createElementNS('http://www.w3.org/2000/svg', 'line');
			singleElement.setAttribute("x1",85);
			singleElement.setAttribute("y1",50);
			singleElement.setAttribute("x2",115);
			singleElement.setAttribute("y2",50);
			singleElement.setAttribute("stroke","black");
			singleElement.setAttribute("stroke-width",2);
			svg.appendChild(singleElement);
		}
			
		if (simplePattern){
			// set the wires
			// { source: { id: gates.input.id, port: 'out' }, target: { id: gates.not.id, port: 'in' }},
			for (i = 0; i < Object.keys(gates).length - 1; i++)
			{
				var gatefrom = 'gate' + i;
				//console.log(gatefrom);
				var j = i +1;
				var gateto = 'gate' + j ;
				//console.log(gateto);
				var wtemp = {};
				wtemp.source = {};
				wtemp.target = {};
				wtemp.source.id = gates[gatefrom].id;
				wtemp.source.port = 'out';
				wtemp.target.id = gates[gateto].id;
				wtemp.target.port = 'in2';
				wires.push(wtemp);
			}

				
			// print labels on the gates
			var svg = document.getElementById("modelCircuitPlot").getElementsByTagName("svg")[0];
			var t = 0;
			for (i = 0; i < Object.keys(gates).length ; i++)
			{
				var gateid = 'gate' + i ;
				console.log(gateid);
			if (i == 0){
					var yPosOffset = 15;
					for (j = 0; j < 2; j++)
				{
					var textelement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
					textelement.setAttribute("x", (gates[gateid].attributes.position.x - 50)*zoom);
						textelement.setAttribute("y", (gates[gateid].attributes.position.y + yPosOffset)*zoom);
						textelement.setAttribute("font-family","Verdana"); 
						textelement.setAttribute("font-size","8");
						textelement.setAttribute("font-weight","bold");
						textelement.textContent = tokens[t];
						//console.log(textelement);
						svg.appendChild(textelement);
						t += 1;
						yPosOffset += 15;
					}
				}else{
					var textelement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
					textelement.setAttribute("x", (gates[gateid].attributes.position.x - 50)*zoom);
					textelement.setAttribute("y", (gates[gateid].attributes.position.y + 30)*zoom);
					textelement.setAttribute("font-family","Verdana"); 
					textelement.setAttribute("font-size","8");
					textelement.setAttribute("font-weight","bold");
					textelement.textContent = tokens[t];
					//console.log(textelement);
					svg.appendChild(textelement);
					t += 1;
				}	
			}
				
				// add gates and wires to the graph
			graph.addCells(_.toArray(gates));
			_.each(wires, function(attributes) {
				graph.addCell(paper.getDefaultLink().set(attributes));
			});
		}	
		
		console.log(wires);
			
		// add gates and wires to the graph
		graph.addCells(_.toArray(gates));
		_.each(wires, function(attributes) {
				graph.addCell(paper.getDefaultLink().set(attributes));
		});						
	}
			
</script>