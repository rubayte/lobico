	<div class="container-fluid">
    	
    	<div class="panel panel-default">
			<div class="panel-heading">
    			<h4 class="panel-title">
    				Drug: <b><%= @drug %></b>
    			</h4>
  			</div>
  			<div class="panel-body">
   	 				<% @models.values[0].split("#").each do |model| -%>
				    	<div class="panel panel-default">
							<div class="panel-heading">
    							<h3 class="panel-title">
    								Models
    							</h3>
  							</div>
  							<div class="panel-body">

								<div class="row">
									<div class="col-md-12">
										<div align="center">
			  								<div id="inputPlot" align="center">
  											</div>
  										</div>	
  									</div>
  									<!--
									<div class="col-md-4">
		  								<div id="histogramPlot" align="left">
  										</div>
  									</div>
  									<div class="col-md-4">
  										<div id="mutationPlot" align="center">
  										</div>
									</div>
  									<div class="col-md-4">
  										<div id="tissuePlot" align="center">
  										</div>
									</div>
									-->
  									<hr>
								</div>
  								
								<% for i in 1..8 -%>
									<div class="models">
										<div class="input-group">
										<% if i == 1 -%>
  											<span class="input-group-addon" id="basic-addon1"><strong>Best</br>Model</strong></span>
										<% else -%>
  											<span class="input-group-addon" id="basic-addon1">Model</span>
										<% end -%>
  											<div class="row">
											<div class="col-md-3">
												<div align="center">
													<% (sM,cvM) = @models.keys[0].split(";") -%>
													Single Model: <b><%= sM %></b></br>
													CV Model: <b><%= cvM %></b></br>
													<% if i == 1-%>
													<hr>
													<div align="center">
  														<% vals = model.split(";") -%>
  														Cancer:<b><%= vals[0] %></b></br>
  														Drug target: <b><%= vals[2] %></b> </br> 
  														Drug class:<b><%= vals[3] %></b></br>
  														Number of IC50s measured: <b><%= vals[4] %></b> </br> 
  														Number of sensitive cell lines: <b><%= vals[5] %></b></br>
  														CV error: <b><%= vals[8] %></b> </br> 
  														P-value: <b><%= vals[9] %></b> </br> 
  													</div>
													<% end -%>
												</div>
											</div>	
											<div class="col-md-6">
												<div align="center">
													<div id="modelPlot<%= i %>" >													
													</div>
												</div>	
											</div>
											<div class="col-md-3">
												<div align="center">
													<div id="boxPlot<%= i %>">
  													</div>
												</div>	
											</div>	
											</div>
  										</div>
  									</div>	
  									&nbsp;
								<% end -%>
								
   	 						</div>
   	 					</div>	
   	 				<% end -%>
  			</div>
		</div>
    	
    </div>	
    

<script type="text/javascript">

	$(document).ready(function(){	
  		var data= <%= @histData.html_safe %>;
		var tdata = <%= @tusData.html_safe %>;
		var todata = <%= @tusOData.html_safe %>;
		var mdata = <%= @mutData.html_safe %>;
		var modata = <%= @mutOData.html_safe %>;
		
		//var parentWidth = document.body.clientWidth;
		//var parentHeight = document.body.clientHeight;
		//width(); //document.width;
		//var percentsX = parseInt(document.getElementById("inputPlot").style.width);
		//var percentsY = parseInt(document.getElementById("inputPlot").style.height);
		//var pixelsW = parentWidth * (percentsX/100);
		//var pixelsH = parentHeight * (percentsY/100);
		//var pixelsW = document.getElementById('inputPlot').offsetWidth;
		//var pixelsH = document.getElementById('inputPlot').offsetHeight;
		//console.log(pixelsH);
		var pixelsW = $("#inputPlot").width();
		console.log(pixelsW);
		//var pixelsW = 1000;
		var pixelsH = 600;  		

  		var svg = dimple.newSvg("#inputPlot", pixelsW, pixelsH);
		
		// Set the bounds for the charts
		var row = 0,
		col = 0,
		top = 30,
		left = 100,
		inMarg = 10,
		width = (pixelsW/3) - 100,
		height = pixelsH - 170,
		heightBottomRow = 40,
		totalWidth = parseFloat(svg.attr("width"));
		
		// loop over 
		for (i = 0; i < 6; i++ )
		{
			var heightMain = 0;
			// Wrap to the row above
			if (left + ((col + 1) * (width + inMarg)) > totalWidth) {
				row += 1;
				col = 0;
			}		
			
			if (row > 0){
				heightMain = heightBottomRow;
			}else{
				heightMain = height;
			}
					
			var x = 0;
			var y = 0;
			if (i == 0)
			{
				// draw the histogram of sensitive and resistant cell lines		
				var myChart = new dimple.chart(svg, data);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);

				y = myChart.addCategoryAxis("y", "logIC50");
				y.addOrderRule("logIC50",true);
				x = myChart.addMeasureAxis("x", "Number_of_Cell_lines");
				myChart.addSeries("Classification", dimple.plot.bar);
				myChart.addLegend(left+10, (top - 10), (width/2), 20, "right");
				myChart.draw();
			}else if (i == 1){
				// draw the binary cell line tissue heatmap
				var myChart = new dimple.chart(svg, tdata);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);

				y = myChart.addCategoryAxis("y", "Cellline");
				x = myChart.addCategoryAxis("x", "Tissue");
				//myChart.addSeries(null, dimple.plot.bar);
				var st = myChart.addSeries("Score", dimple.plot.bar);
				st.stacked = false;
				myChart.draw();				
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
				
				// titles
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() - 20)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.text("Tissue Types");	
			}else if (i == 2){
				// draw the binary cell line mutation heatmap
				var myChart = new dimple.chart(svg, mdata);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);
				y = myChart.addCategoryAxis("y", "Cellline");
				x = myChart.addCategoryAxis("x", "Input");
				//myChart.addSeries(null, dimple.plot.bar);
				var s = myChart.addSeries("Score", dimple.plot.bar);
				s.stacked = false;
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
				
				// titles
				svg.append("text")
   					.attr("x", myChart._xPixels() + myChart._widthPixels() / 2)
   					.attr("y", myChart._yPixels() - 20)
					.style("text-anchor", "middle")
					.style("font-family", "sans-serif")
					.style("font-weight", "bold")
					.text("Mutations");
					
			}else if (i == 4){
				// draw the overall tissue scenario
				var myChart = new dimple.chart(svg, todata);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);
				x = myChart.addCategoryAxis("x", "Tissue");
				y = myChart.addCategoryAxis("y", "Param");
				myChart.addMeasureAxis("p", "Score");
				//var s = myChart.addSeries("TScore", dimple.plot.bar);
				var s = myChart.addSeries("TypeCelllines", dimple.plot.pie);
        		s.radius = 15;
				//s.stacked = false;
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else if (i == 5){
				// draw the overall mutation scenario
				var myChart = new dimple.chart(svg, modata);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					heightMain);
				x = myChart.addCategoryAxis("x", "Input");
				y = myChart.addCategoryAxis("y", "Param");
				myChart.addMeasureAxis("p", "Count");
				var s = myChart.addSeries("CountType", dimple.plot.pie);
        		s.radius = 15;
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");
			}else{
				
			}
			
			if (i != 3){
				// Once drawn we can access the shapes
				// If this is not in the first column remove the y text
				if (col > 0) {
					y.shapes.selectAll("text").remove();
					// Remove the axis labels
					y.titleShape.remove();
				}
				// If this is not in the last row remove the x text
				if (row < 1) {
					x.shapes.selectAll("text").remove();
					if (i > 0){
						// Remove the axis labels
						x.titleShape.remove();	
					}
				}else{
					// Remove the axis labels
					x.titleShape.remove();	
				}
			}		

			// Move to the next column
			col += 1;
		}
		
	});
	
</script>

    
<script type="text/javascript">
	function overallPlot(){
				var myChart = new dimple.chart(svg, todata);
				myChart.setBounds(
					left + (col * (width + inMarg)),
					top + (row * (height + inMarg)),
					width,
					height);
				x = myChart.addCategoryAxis("x", "Tissue");
				y = myChart.addCategoryAxis("x", "SensitiveCelllines:");
				var s = myChart.addSeries("TScore", dimple.plot.bar);
				s.stacked = false;
				myChart.draw();
				x.shapes.selectAll("text").attr("transform", " translate(10,-10) rotate(45)");	
	}
</script> 

<script type="text/javascript">

	$(document).ready(function(){	
  		var dataModel = <%= @modelData.html_safe %>;
  		
  		for (i = 0; i < 8; i++ ){
  			var divid = i + 1;
  			var svgName = "#modelPlot" + divid;
  			var modelName = "Model" + divid;
	  		var svg = dimple.newSvg(svgName, 700, 200);
	  		
	  		// draw the pie chart with T* and F*
	  		tempData = dimple.filterData(dataModel,"Model",[modelName]);
	  		var myChart = new dimple.chart(svg, tempData);
			myChart.setBounds(50, 10, 100, 150);
			myChart.addMeasureAxis("p", "Value");
			var ring = myChart.addSeries("Param", dimple.plot.pie);
      		ring.innerRadius = "75%";
      		myChart.addLegend(10, 175, 200, 10, "right");
			myChart.draw();
			
			// draw the bar plot of second set of params
			tempData2 = dimple.filterData(tempData,"Param2",["Specificity","Precision","Recall"])
			var myChart2 = new dimple.chart(svg, tempData2);
			myChart2.setBounds(300, 50, 300, 100);
			var y = myChart2.addCategoryAxis("y", "Param2");
			var x = myChart2.addMeasureAxis("x", "Value2");
			var s = myChart2.addSeries(null, dimple.plot.bar);
			myChart2.draw();
			
			// draw the boxplots
			//tempData2 = dimple.filterData(tempData,"Param3")
			//var myChart3 = new dimple.chart(svg, tempData);
			//myChart3.setBounds(700, 50, 350, 100);
			//var y = myChart3.addCategoryAxis("y", "Param3");
			//var x = myChart3.addMeasureAxis("x", "Value3");
			//var s = myChart3.addSeries(null, dimple.plot.bar);
			//myChart3.draw();
  		}
  		
	});
	
</script>


<script type="text/javascript">

	// $(document).ready(function(){
	var margin = {top: 10, right: 50, bottom: 10, left: 50},
    width = 120 - margin.left - margin.right,
    height = 200 - margin.top - margin.bottom;

	var min = Infinity,
    	max = -Infinity;

	var chart = d3.box()
    	.whiskers(iqr(1.5))
    	.width(width)
    	.height(height);
    	
	var bdata = <%= @boxData.html_safe %>;
	//console.log(bdata);
	
	//d3.csv(bdata, function(error, csv) {
	  //if (error) throw error;

	  var data = [];

	  bdata.forEach(function(x) {
	  	//console.log(x);
	    //console.log(x.Expt);
	    var e = Math.floor(x.Expt - 1),
	        r = Math.floor(x.Run - 1),
	        s = Math.floor(x.Speed),
	        d = data[e];
	       
	    if (!d) d = data[e] = [s];
	    else d.push(s);
	    if (s > max) max = s;
	    if (s < min) min = s;
	  });

	chart.domain([min, max]);
	
	for (i = 0; i < 8; i++ ){
  		var divid = i + 1;
  		var svgName = "#boxPlot" + divid;
  		var svg = d3.select(svgName).selectAll("svg")
	      .data(data)
	    .enter().append("svg")
	      .attr("class", "box")
	      .attr("width", width + margin.left + margin.right)
	      .attr("height", height + margin.bottom + margin.top)
	    .append("g")
	      .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
	      .call(chart);
  	}
	

	//setInterval(function() {
	 //   svg.datum(randomize).call(chart.duration(1000));
	  //}, 2000);
	  //console.log('done');
	//});

	//function randomize(d) {
	//  if (!d.randomizer) d.randomizer = randomizer(d);
	//  return d.map(d.randomizer);
	//}

	//function randomizer(d) {
	//  var k = d3.max(d) * .02;
	//  return function(d) {
	//    return Math.max(min, Math.min(max, d + k * (Math.random() - .5)));
	//  };
	//}

	// Returns a function to compute the interquartile range.
	function iqr(k) {
	  return function(d, i) {
	    var q1 = d.quartiles[0],
	        q3 = d.quartiles[2],
	        iqr = (q3 - q1) * k,
	        i = -1,
	        j = d.length;
	    while (d[++i] < q1 - iqr);
	    while (d[--j] > q3 + iqr);
	    return [i, j];
	  };
	}
	//});
</script>


